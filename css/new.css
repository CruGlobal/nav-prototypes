@charset "UTF-8";
/*------------------------------------*\
    VARS.SCSS
\*------------------------------------*/
/**
 * Any variables you find set in brackets.css’ `_vars.scss` that you do not wish to
 * keep, simply redefine here. This means that if brackets.css, for example, sets
 * your `$base-font-size` at 16px and you wish it to be 14px, simply redeclare
 * that variable in this file. Brackets.css ignores its own variables in favour of
 * using your own, so you can completely modify how brackets.css works without ever
 * having to alter the framework itself.
 */
/**
 * Place any variables that should override brackets.css’ defaults here.
 */
/**
 * Would you like to show a baseline grid? This is handy during development.
 */
/*------------------------------------*\
    $BORDER-BOX
\*------------------------------------*/
/**
 * Do you want all elements to adopt `box-sizing:border-box;` as per
 * paulirish.com/2012/box-sizing-border-box-ftw ?
 */
/*------------------------------------*\
    $BASE
\*------------------------------------*/
/**
 * Base font family
 */
/**
 * Default colours for objects’ borders etc.
 */
/**
 * Default value for edges and such
 */
/*------------------------------------*\
    $TYPOGRAPHY
\*------------------------------------*/
/**
 * Basic font sizes
 */
/**
 * Headings
 */
/* Header sizes */
/* Subheaders */
/**
 * Smalls
 */
/**
 * Paragraphs
 */
/**
 * Blockquotes
 */
/*------------------------------------*\
    $GRID
\*------------------------------------*/
/**
 * This grid system is heavily based off the work of Harry Roberts of
 * css-wizardry and inuit.css. Css-wizardry-grids provides the basic
 * foundation and inspiration.
 */
/**
 * If you are building a non-responsive site but would still like to use
 * the girds, set this to ‘false’:
 */
/**
 * Is this build mobile first? Setting to ‘true’ means that all grids will be
 * 100% width if you do not apply a more specific class to them.
 */
/**
 * Set the max width of your grids, if you set this to false, the wrapper will only
 * center the content and apply a left/right padding
 */
/**
 * Set the spacing between your grid items.
 */
/**
 * Would you like push and pull classes enabled? Keep in mind this adds a large
 * amount of additional code
 */
/**
 * Using `inline-block` means that the grid items need their whitespace removing
 * in order for them to work correctly. Set the following to true if you are
 * going to achieve this by manually removing/commenting out any whitespace in
 * your HTML yourself.
 *
 * Setting this to false invokes a hack which cannot always be guaranteed,
 * please see the following for more detail:
 *
 * github.com/csswizardry/csswizardry-grids/commit/744d4b23c9d2b77d605b5991e54a397df72e0688
 * github.com/csswizardry/inuit.css/issues/170#issuecomment-14859371
 */
/**
 * Define your breakpoints. The first value is the prefix that shall be used for
 * your classes (e.g. `.palm--one-half`), the second value is the media query
 * that the breakpoint fires at.
 */
/**
 * Define which namespaced breakpoints you would like to generate for each of
 * widths, push and pull. This is handy if you only need pull on, say, desk, or
 * you only need a new width breakpoint at mobile sizes. It allows you to only
 * compile as much CSS as you need. All are turned on by default, but you can
 * add and remove breakpoints at will.
 *
 * Push and pull shall only be used if `$push` and/or `$pull` and `$responsive`
 * have been set to ‘true’.
 */
/*------------------------------------*\
    $LINKS
\*------------------------------------*/
/*------------------------------------*\
    $BUTTONS
\*------------------------------------*/
/**
 * I have included variables for only one buttons, the default, since my wish
 * is to not impose style. Feel free to add more variables. I have included 
 * a mixin to help you generate these easily
 */
/*------------------------------------*\
    $COMPONENTS
\*------------------------------------*/
/**
 * These variables are framework variables, sourced from variables defined
 * above. Feel free to use these variables throughout your project, but do not
 * modify or reassign them.
 */
/*------------------------------------*\
    $PROJECT-MODES
\*------------------------------------*/
/**
 * This allows you to use debug settings which can be useful in
 * development.
 *
 * Make sure to set this to false before using the code for production.
 */
/*------------------------------------*\
    $OBJECTS-AND-ABSTRACTIONS
\*------------------------------------*/
/**
 * All of brackets.css’ objects and abstractions are initially turned off by
 * default. This means that you start any project with as little as possible,
 * and introducing objects and abstractions is as simple as switching the
 * following variables to `true`.
 */
/*------------------------------------*\
    $OVERRIDES
\*------------------------------------*/
/*------------------------------------*\
    $CUSTOM
\*------------------------------------*/
/**
 * Place any of your own variables that sit on top of brackets.css here.
 */
/*------------------------------------*\
    $Fonts
\*------------------------------------*/
/*------------------------------------*\
    $Color Palette
\*------------------------------------*/
/**
 * Primary colors
 */
/* Cru Gold */
/* Cru Gray */
/* White */
/**
 * Secondary colors
 */
/* Cru Orange */
/**
 * Accent colors
 */
/* Cru Bright Blue */
/* Cru Deep Blue */
/**
 * Grayscale
 */
/**
 * Additional Colors
 */
/*------------------------------------*\
    $BUTTON SETTINGS
\*------------------------------------*/
/*------------------------------------*\
    $URL PATHS
\*------------------------------------*/
/*------------------------------------*\
    $ANIMATIONS
\*------------------------------------*/
/*------------------------------------*\
    $ADDITIONAL
\*------------------------------------*/
/*------------------------------------*\
    $TOOLS
\*------------------------------------*/
/**
 * We will begin by importing functions that will be used in the
 * framework. There is no need to change any of these functions
 */
/**
 * This allows us to use the rem-calc mixin for shorthand 
 * conversions.
 */
/**
 * Use this em function instead of the other
 */
/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * These mixins are for the library to use only, you should not need to modify
 * them at all. 
 */
/*------------------------------------*\
    $MIXINS/ALERTS
\*------------------------------------*/
/**
 * Animations
 */
/*------------------------------------*\
    $MIXINS/BUTTONS
\*------------------------------------*/
/**
 * Border Radius
 */
/* Top-Left Corner */
/* Top-Right Corner Only*/
/* Bottom-Left Corner Only */
/* Bottom-Right Corner Only */
/* Both Top Corners */
/* Both Right Corners */
/* Both Bottom Corners */
/* Both Left Corners */
/*------------------------------------*\
    $MIXINS/BOX-MODEL
\*------------------------------------*/
/**
 * Box Sizing
 */
/*------------------------------------*\
    $MIXINS/BUTTONS
\*------------------------------------*/
/**
 * Button Varients
 */
/**
 * Button Effects: use with btn
 */
/**
 * Button Sizes
 */
/*------------------------------------*\
    $MIXINS/CENTER-BLOCK
\*------------------------------------*/
/**
 * Center-align a block level element
 */
/*------------------------------------*\
    $MIXINS/CLEARFIX
\*------------------------------------*/
/**
 * For modern browsers
 * 1. The space content is one way to avoid an Opera bug when the
 *    contenteditable attribute is included anywhere else in the document.
 *    Otherwise it causes space to appear at the top and bottom of elements
 *    that are clearfixed.
 * 2. The use of `table` rather than `block` is only necessary if using
 *    `:before` to contain the top-margins of child elements.
 * 
 *  Source: http://nicolasgallagher.com/micro-clearfix-hack/
 */
/**
 * The newest clearfix: Unsure about support
 */
/*------------------------------------*\
    $MIXINS/FORMS
\*------------------------------------*/
/**
 * Form control sizing
 *
 * Relative text size, padding, and border-radii changes for form controls. For
 * horizontal sizing, wrap controls in the predefined grid classes. `<select>`
 * element gets special love because it's special, and that's a fact!
 * [converter] $parent hack
 */
/*------------------------------------*\
    $MIXINS/GRID-SETUP
\*------------------------------------*/
/**
 * Enclose a block of code with a media query as named in `$breakpoints`.
 */
/*------------------------------------*\
    $MIXINS/IMAGES
\*------------------------------------*/
/** 
 * Responsive image
 *
 * Keep images from scaling beyond the width of their parents.
 */
/*------------------------------------*\
    $MIXINS/LINKS
\*------------------------------------*/
/**
 * Writes the typical link, button in one go
 * Includes active and focus for accessibility 
 * 
 */
/*------------------------------------*\
    $MIXINS/MEDIA-QUERY
\*------------------------------------*/
/**
 * Media query for easy breakpoint. Use pixel width with or without units
 * and it will convert to em 
 */
/**
 * Set $query1: max for a max-qidth query, defaults to min-width
 */
/*------------------------------------*\
    $MIXINS/MESSAGE
\*------------------------------------*/
/*------------------------------------*\
    $MIXINS/PANELS
\*------------------------------------*/
/*------------------------------------*\
    $MIXINS/PREFIX
\*------------------------------------*/
/**
 * Create vendor-prefixed CSS in one go, e.g.
 *
   `@include vendor(border-radius, 4px);`
 *
 */
/*------------------------------------*\
    $MIXINS/SIZING
\*------------------------------------*/
/**
 * Can handle shorthand calculations
 * Do not change the variable set
 * http://hugogiraudel.com/2013/03/18/ultimate-rem-mixin/
 */
/**
 * Space elements by an amount based on your magic number. Pass in the property
 * to be indented as a paramater, e.g.:
 *
 * pre {
 *    @include spacing(padding-left);
 * }
 */
/*------------------------------------*\
    $MIXINS/SPACING
\*------------------------------------*/
/**
 *  Calculates any number of margins and paddings in one swoop
 * 
 * Running this is as easy 
 * @include vertical-calc(1, 12) {}
 *
 * DO NOT USE AT THE MOMENT
 */
/*------------------------------------*\
    $MIXINS/TEXT
\*------------------------------------*/
/**
 * Quickly generate a font-size in rems, with a pixel fallback, based on the
 * value we pass into the mixin, e.g.:
 *
 * h1 {
 *     @include font-size(24px);
 * }
 */
/**
 * Style any number of headings in one fell swoop, e.g.:
 *
   .foo{
       @include headings(1, 3){
           color:#c0ffee;
       }
    }
 *
 * With thanks to @lar_zzz, @paranoida, @rowanmanning and ultimately
 * @thierrylemoulec for refining and improving my initial mixin.
 */
/* line 10, ../scss/new.scss */
.sliding-nav {
  position: relative;
  overflow: hidden;
  width: 240px; }
  @media screen and (max-width: 61.25em) {
    /* line 10, ../scss/new.scss */
    .sliding-nav {
      z-index: auto; } }

/* line 21, ../scss/new.scss */
.site-nav {
  left: 0;
  overflow-y: auto;
  overflow-x: hidden;
  display: block;
  position: fixed;
  bottom: 0;
  right: auto;
  width: 240px; }
  @media screen and (max-width: 61.25em) {
    /* line 21, ../scss/new.scss */
    .site-nav {
      top: 80px;
      opacity: .001;
      z-index: 0; } }

/* line 39, ../scss/new.scss */
.wrap {
  position: relative;
  padding: 0;
  margin-left: 240px;
  margin-right: 0;
  width: auto;
  background-color: #fff;
  -webkit-tap-highlight-color: transparent;
  height: inherit; }
  @media screen and (max-width: 61.25em) {
    /* line 39, ../scss/new.scss */
    .wrap {
      margin-left: 0;
      border-left: 0 none;
      -moz-backface-visibility: hidden;
      -webkit-backface-visibility: hidden;
      backface-visibility: hidden;
      -moz-transform: translateZ(0);
      -ms-transform: translateZ(0);
      -webkit-transform: translateZ(0);
      transform: translateZ(0); } }

/* line 59, ../scss/new.scss */
.site-logo {
  position: fixed;
  height: 88px;
  width: 240px;
  background-color: #fff; }
  /* line 65, ../scss/new.scss */
  .site-logo a {
    background: url("/images/cru-logo.svg") no-repeat scroll 50% 50% transparent;
    background-size: 94px auto;
    height: 88px;
    width: 140px; }

/* line 73, ../scss/new.scss */
.site-nav {
  top: 88px; }
  /* line 76, ../scss/new.scss */
  .site-nav > li {
    font-size: 18px; }
    /* line 79, ../scss/new.scss */
    .site-nav > li:first-child a {
      border-top: 1px solid #eee;
      border-right: none; }
    /* line 84, ../scss/new.scss */
    .site-nav > li > a {
      color: #484848;
      padding: 12px 15px 12px;
      border-bottom: 1px solid #eee;
      border-right: 1px solid #eee; }
      /* line 90, ../scss/new.scss */
      .site-nav > li > a:hover {
        color: #484848;
        text-decoration: none; }

/* line 98, ../scss/new.scss */
.site-search {
  height: 89px;
  width: 100%;
  border-bottom: 1px solid #eee; }
  /* line 103, ../scss/new.scss */
  .site-search form {
    float: right; }

/* line 108, ../scss/new.scss */
.toolbar {
  border-bottom: 1px solid #eee;
  padding: 9px 14.5px;
  margin-bottom: 29px; }

/* line 115, ../scss/new.scss */
.page-content {
  padding-top: 0; }

/* line 120, ../scss/new.scss */
.button-group > .button {
  margin-right: 10px;
  font-size: 14px;
  padding: 4px 10px; }

/*# sourceMappingURL=new.css.map */
